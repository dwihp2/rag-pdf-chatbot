// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

// default: DATABASE_URL and DIRECT_URL

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Chat {
  id        String   @id @default(cuid())
  title     String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  messages Message[]

  @@map("chats")
}

model Message {
  id        String   @id @default(cuid())
  chatId    String   @map("chat_id")
  role      Role
  content   String
  sources   Json? // JSON field for storing source documents
  createdAt DateTime @default(now()) @map("created_at")

  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@map("messages")
}

enum Role {
  user
  assistant
}

model Document {
  id           String   @id @default(cuid())
  filename     String
  originalName String   @map("original_name")
  fileSize     Int      @map("file_size")
  mimeType     String   @map("mime_type")
  uploadedAt   DateTime @default(now()) @map("uploaded_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  status       String   @default("processing") // processing, completed, failed
  vectorId     String?  @map("vector_id") // Reference to Qdrant vector ID
  summary      String?
  chunkCount   Int      @default(0) @map("chunk_count")

  @@map("documents")
}
